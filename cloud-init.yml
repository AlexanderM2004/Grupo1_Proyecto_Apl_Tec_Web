#cloud-config
package_upgrade: true

packages:
  # Paquetes esenciales
  - apt-transport-https
  - ca-certificates
  - curl
  - software-properties-common
  - gnupg
  - git
  - unzip

runcmd:
  # Actualizar el sistema
  - apt-get update
  - apt-get upgrade -y

  # Instalar Docker
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
  - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

  # Configurar Docker
  - systemctl start docker
  - systemctl enable docker

  # Clonar el repositorio en /var/www
  - mkdir -p /var/www
  - git clone https://github.com/AlexanderM2004/Grupo1_Proyecto_Apl_Tec_Web.git /var/www
  - chmod -R 755 /var/www

  # Crear directorios necesarios con permisos adecuados
  - mkdir -p /var/www/api/logs
  - chown -R www-data:www-data /var/www/api/logs
  - chmod -R 775 /var/www/api/logs
  - mkdir -p /var/www/docker/nginx/conf.d
  - mkdir -p /var/www/docker/nginx/logs

  # Instalar Composer globalmente en el sistema como root
  - curl -sS https://getcomposer.org/installer | php
  - mv composer.phar /usr/local/bin/composer

  # Crear el archivo .env en api/
  - |
    cat > /var/www/api/.env << 'EOF'
    DB_HOST=host
    DB_NAME=dbname
    DB_USER=dbuser
    DB_PASS=dbpass
    DB_PORT=5432
    JWT_SECRET=secreto_supersecreto_123
    JWT_EXPIRATION=3600
    RATE_LIMIT=100
    RATE_LIMIT_TIME=3600
    APP_ENV=production
    APP_DEBUG=true
    EOF

  # Ajustar permisos del .env
  - chmod 640 /var/www/api/.env
  - chown www-data:www-data /var/www/api/.env

  # Asegurar que cualquier usuario con permisos administrativos pueda ejecutar Docker
  - groupadd docker || true
  - usermod -aG docker $(whoami)

  # Iniciar Docker Compose y construir la imagen
  - cd /var/www
  - docker compose build
  - docker compose up -d
  - sleep 10  # Dar tiempo a que los contenedores esten listos
  - docker compose exec -T app composer install --no-dev --optimize-autoloader

  # Reiniciar contenedores para aplicar cambios
  - docker compose restart

  - docker compose logs app > /var/log/docker-app.log
  - docker compose logs webserver > /var/log/docker-nginx.log
